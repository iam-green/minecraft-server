#!/bin/bash
set -e

VERSION="latest"
TYPE="paper"
RAM="4G"
SERVER_DIRECTORY=.
LIBRARY_DIRECTORY=~/.iam-green
REMAPPED=false
FORCE_REPLACE=false
MOD_VERSION="recommend"
SERVER_FILE="server.jar"

usage() {
  echo "Usage: $0 [OPTIONS]"
  echo "Options:"
  echo " -h, --help                               Show this help and exit"
  echo " -v, --version <version>                  Select the Minecraft Server version"
  echo " -m, --mod-version <version>              Select the Minecraft Mod Server version"
  echo " -t, --type <vanilla|paper|fabric>        Select the Bukkit type you want to install"
  echo " -r, --ram <ram_size>                     Select the amount of RAM you want to allocate to the server"
  echo " -d, -sd, --server-directory <directory>  Select the path to install the Minecraft Server"
  echo " -ld, --library-directory <directory>     Select the path to install the required libraries"
  echo " -u, --update                             Update the script to the latest version"
  echo " --remapped                               Select the remapped version of the server"
  echo " --force-replace                          Force replace the existing server file"
}

has_argument() {
  [[ ("$1" == *=* && -n ${1#*=}) || (! -z "$2" && "$2" != -*) ]]
}

extract_argument() {
  echo "${2:-${1#*=}}"
}

handle_argument() {
  while [ $# -gt 0 ]; do
    case $1 in
    -h | --help)
      usage
      exit 0
      ;;
    -v | --version)
      if ! has_argument $@; then
        echo "Version not specified." >&2
        usage
        exit 1
      fi
      VERSION=$(extract_argument $@)
      shift
      ;;
    -d | -sd | --server-directory | --serverDirectiry)
      if ! has_argument $@; then
        echo "Location not specified." >&2
        usage
        exit 1
      fi
      SERVER_DIRECTORY=$(extract_argument $@)
      shift
      ;;
    -ld | --library-directory | --libraryDirectory)
      if ! has_argument $@; then
        echo "Location not specified." >&2
        usage
        exit 1
      fi
      LIBRARY_DIRECTORY=$(extract_argument $@)
      shift
      ;;
    -r | --ram)
      if ! has_argument $@; then
        echo "RAM not specified." >&2
        usage
        exit 1
      fi
      RAM=$(extract_argument $@)
      shift
      ;;
    -m | --mod-version | --modVersion)
      if ! has_argument $@; then
        echo "Mod Version not specified." >&2
        usage
        exit 1
      fi
      MOD_VERSION=$(extract_argument $@)
      shift
      ;;
    --remapped)
      REMAPPED=true
      ;;
    --force-replace | --forceReplace)
      FORCE_REPLACE=true
      ;;
    -t | --type)
      if ! has_argument $@; then
        echo "Bukkit type not specified." >&2
        usage
        exit 1
      fi
      TYPE=$(extract_argument $@)
      shift
      ;;
    -u | --update)
      curl -s -o ./server -L https://raw.githubusercontent.com/iam-green/minecraft-server/main/server
      chmod +x ./server
      echo The update is complete, please re-run the code.
      exit 0
      ;;
    *)
      echo "Invalid option: $1" >&2
      usage
      exit 1
      ;;
    esac
    shift
  done
}

set_timezone() {
  if [ $TZ ]; then
    ln -sf /usr/share/zoneinfo/$TZ /etc/localtime
  fi
}

get_os() {
  if [ $(uname) == "Darwin" ]; then
    echo "macos"
  else
    echo "linux"
  fi
}

get_arch() {
  case $(uname -m) in
  "x86_64")
    echo "amd64"
    ;;
  "arm64" | "aarch64")
    echo "arm64"
    ;;
  *)
    echo "This architecture is not supported."
    exit 1
    ;;
  esac
}

create_group_user() {
  if [ ! $UID ] || [ ! $GID ] || id -u $UID >/dev/null 2>&1 || getent group $GID >/dev/null 2>&1; then
    USER=$([ $(uname) = "Darwin" ] && id -un $UID || getent passwd "$UID" | cut -d: -f1)
    return 0
  fi

  if ! grep -q ":$GID:" /etc/group; then
    groupadd -g "$GID" minecraft
  fi

  if ! id "$UID" &>/dev/null; then
    useradd -u "$UID" -g "$GID" -m minecraft
  fi

  USER=$([ $(uname) = "Darwin" ] && id -un $UID || getent passwd "$UID" | cut -d: -f1)
}

directory_setting() {
  if [ ! -d $SERVER_DIRECTORY ]; then
    mkdir -p $SERVER_DIRECTORY
  fi
  if [ ! -d $LIBRARY_DIRECTORY ]; then
    mkdir -p $LIBRARY_DIRECTORY
  fi
  SERVER_DIRECTORY=$(realpath $SERVER_DIRECTORY)
  LIBRARY_DIRECTORY=$(realpath $LIBRARY_DIRECTORY)
}

set_chown() {
  chown -R $USER $SERVER_DIRECTORY $LIBRARY_DIRECTORY
}

get_mc_manifest() {
  echo $(curl -s https://launchermeta.mojang.com/mc/game/version_manifest.json)
}

get_mc_version_list() {
  echo $(get_mc_manifest | $LIBRARY_DIRECTORY/jq ".versions")
}

get_mc_latest_version() {
  echo $(get_mc_manifest | $LIBRARY_DIRECTORY/jq -r ".latest.release")
}

get_mc_snapshot_version() {
  echo $(get_mc_manifest | $LIBRARY_DIRECTORY/jq -r ".latest.snapshot")
}

# check_java_version <minecraft_version>
check_java_version() {
  local version_url=$(get_mc_version_list | $LIBRARY_DIRECTORY/jq -r ".[] | select(.id == \"$1\") | .url")
  echo $(curl -s $version_url | $LIBRARY_DIRECTORY/jq -r ".javaVersion.majorVersion")
}

# check_mc_version_exist <minecraft_version>
check_mc_version_exist() {
  local version_=$1
  local version_exist=$(get_mc_version_list | $LIBRARY_DIRECTORY/jq ".[] | select(.id == \"$version_\") | .id")
  if [ ! $version_exist ]; then
    echo "This Minecraft version could not be found."
    exit 1
  fi
}

install_jq() {
  if [ ! -e $LIBRARY_DIRECTORY/jq ]; then
    curl -s -o $LIBRARY_DIRECTORY/jq -L https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-$(get_os)-$(get_arch)
    chmod +x $LIBRARY_DIRECTORY/jq
  fi
}

# install_java <java_version> <os> <architecture>
install_java() {
  if [ ! -d $LIBRARY_DIRECTORY/java ]; then
    mkdir -p $LIBRARY_DIRECTORY/java
  fi
  if [ ! -d "$LIBRARY_DIRECTORY/java/$1" ]; then
    local temp_name=$(curl -s "https://api.azul.com/metadata/v1/zulu/packages/?java_version=$1&os=$2&arch=$3&java_package_type=jre&page=1&page_size=1&release_status=ga&availability_types=CA&certifications=tck&archive_type=tar.gz" | $LIBRARY_DIRECTORY/jq -r ".[0].name")
    local java_name="${temp_name%.tar.gz}"
    curl -s -o $LIBRARY_DIRECTORY/java_$1.tar.gz https://cdn.azul.com/zulu/bin/$java_name.tar.gz
    tar -zxf $LIBRARY_DIRECTORY/java_$1.tar.gz -C $LIBRARY_DIRECTORY
    mv $LIBRARY_DIRECTORY/$java_name $LIBRARY_DIRECTORY/java/$1
    rm $LIBRARY_DIRECTORY/java_$1.tar.gz
  fi
}

# download_vanilla_server <minecraft_version>
download_vanilla_server() {
  local version_url=$(curl -s https://launchermeta.mojang.com/mc/game/version_manifest.json | $LIBRARY_DIRECTORY/jq -r ".versions[] | select(.id == \"$1\") | .url")
  local server_file=$(curl -s $version_url | $LIBRARY_DIRECTORY/jq -r ".downloads.server.url")
  if [ $server_file == "null" ]; then
    echo "Vanilla Server does not support this minecraft version."
    exit 1
  fi
  curl -s -o $SERVER_DIRECTORY/$SERVER_FILE -L $server_file || { echo "Vanilla Server file could not be downloaded."; exit 1; }
}

# download_paper_server <minecraft_version> <remapped>
download_paper_server() {
  local status=$(curl -s -o /dev/null -w "%{http_code}" https://api.papermc.io/v2/projects/paper/versions/$1)
  if [ $status -ne 200 ]; then
    echo "PaperMC Server does not support this minecraft version."
    exit 1
  fi
  local build_id=$(curl -s https://api.papermc.io/v2/projects/paper/versions/$1 | $LIBRARY_DIRECTORY/jq -r ".builds[-1]")
  local mojmap=$([ $2 == true ] && echo "-mojmap" || echo "")
  local url="https://api.papermc.io/v2/projects/paper/versions/$1/builds/$build_id/downloads/paper$mojmap-$1-$build_id.jar"
  curl -s -o $SERVER_DIRECTORY/$SERVER_FILE -L $url || { echo "PaperMC Server file could not be downloaded."; exit 1; }
}

# get_forge_version <minecraft_version> <forge_version>
get_forge_version() {
  local temp=$2
  MOD_VERSION=$(
    if [ $temp == "recommend" ]; then
      if [[ "$content" == *"Recommended: "* ]]; then
        echo "$content" | sed -n 's/.*Recommended: \([^"]*\).*/\1/p'
      else
        temp="latest"
      fi
    fi
    if [ $temp == "latest" ]; then
      echo "$content" | sed -n 's/.*Latest: \([^"]*\).*/\1/p'
    fi
  )
}

# download_forge_server <minecraft_version> <forge_version>
download_forge_server() {
  local content=$(curl -s https://files.minecraftforge.net/net/minecraftforge/forge/index_$1.html)
  if [[ "$content" != *"-$1-$MOD_VERSION-"* ]]; then
    echo "Forge does not support this minecraft version."
    exit 1
  fi
  curl -s -o $SERVER_DIRECTORY/forge_installer.jar -L https://maven.minecraftforge.net/net/minecraftforge/forge/$1-$MOD_VERSION/forge-$1-$MOD_VERSION-installer.jar || { echo "Forge Installer file could not be downloaded."; exit 1; }
  $LIBRARY_DIRECTORY/java/$(check_java_version $1)/bin/java -jar $SERVER_DIRECTORY/forge_installer.jar --installServer $SERVER_DIRECTORY > /dev/null 2>&1
  rm -rf $SERVER_DIRECTORY/forge_installer.jar ./forge_installer.jar.log
}

# get_fabric_version <minecraft_version> <fabric_version>
get_fabric_version() {
  if curl -s "https://meta.fabricmc.net/v2/versions/loader/$1" | $LIBRARY_DIRECTORY/jq -e 'length == 0' > /dev/null; then
    echo "Fabric does not support this minecraft version."
    exit 1
  fi
  MOD_VERSION=$(
    if [ "$2" == "latest" ] || [ "$2" == "recommend" ]; then
      echo $(curl -s https://meta.fabricmc.net/v2/versions/loader | $LIBRARY_DIRECTORY/jq -r '.[0].version')
    else 
      echo $(curl -s https://meta.fabricmc.net/v2/versions/loader | $LIBRARY_DIRECTORY/jq -r ".[] | select(.version==\"$2\") | .version")
    fi
  )
}

# download_fabric_server <minecraft_version> <fabric_version>
download_fabric_server() {
  if [ ! $MOD_VERSION ]; then
    echo "Fabric does not support this loader version."
    exit 1
  fi
  local installer_version=$(curl -s https://meta.fabricmc.net/v2/versions/installer | jq -r ".[0].version")
  local fabric_bukkit="https://meta.fabricmc.net/v2/versions/loader/$1/$MOD_VERSION/$installer_version/server/jar"
  curl -s -o $SERVER_DIRECTORY/$SERVER_FILE -L $fabric_bukkit || { echo "Fabric Server file could not be downloaded."; exit 1; }
}

# get_server_file <type> <minecraft_version> <mod_version> <remapped>
get_server_file() {
  if [ $FORCE_REPLACE ]; then
    rm -rf $SERVER_DIRECTORY/$SERVER_FILE $SERVER_DIRECTORY/libraries
  fi
  case $1 in
    "forge")
      get_forge_version $2 $3;;
    "fabric")
      get_fabric_version $2 $3;;
  esac
  if { [ $1 == "forge" ] && [ -d $SERVER_DIRECTORY/libraries/net/minecraftforge/forge/$VERSION-$MOD_VERSION ]; } ||[ -e $SERVER_DIRECTORY/$SERVER_FILE ]; then
    return 0
  fi
  case $1 in
    "vanilla")
      download_vanilla_server $2;;
    "paper")
      download_paper_server $2 $4;;
    "forge")
      download_forge_server $2 $3;;
    "fabric")
      download_fabric_server $2 $3;;
    *)
      echo "Invaild Bukkit type."
      exit 1;;
  esac
}

# start_server <type> <java_version> <minecraft_version> <mod_version> <ram>
start_server() {
  echo "eula=true" > $SERVER_DIRECTORY/eula.txt
  cd $SERVER_DIRECTORY
  local args=$(
    if [ $1 == "forge" ] && [ -e "$SERVER_DIRECTORY/run.sh" ]; then
      echo "@libraries/net/minecraftforge/forge/$3-$4/unix_args.txt"
    else
      echo "-jar $SERVER_FILE"
    fi
  )
  sudo -u $USER $LIBRARY_DIRECTORY/java/$2/bin/java -Xmx$5 -Dfile.encoding=utf-8 $args nogui
}

handle_argument "$@"

set_timezone
directory_setting
install_jq

if [ $VERSION == "latest" ]; then
  VERSION=$(get_mc_latest_version)
elif [ $VERSION == "snapshot" ]; then
  TYPE="vanilla"
  VERSION=$(get_mc_snapshot_version)
fi

if [ $TYPE != "paper" ]; then
  REMAPPED=false
fi

create_group_user
check_mc_version_exist $VERSION
JAVA_VERSION=$(check_java_version $VERSION)
install_java $JAVA_VERSION $(get_os) $(get_arch)
get_server_file $TYPE $VERSION $MOD_VERSION $REMAPPED
set_chown
start_server $TYPE $JAVA_VERSION $VERSION $MOD_VERSION $RAM
